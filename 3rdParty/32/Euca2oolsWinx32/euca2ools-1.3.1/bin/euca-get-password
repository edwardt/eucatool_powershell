#!/usr/bin/python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import sys
from euca2ools import Euca2ool, Util, InstanceValidationError, \
    FileValidationError, ConnectionFailed

usage_string = \
    """
Retrieves decrypts the administrator password for a Windows instance.

euca-get-password instance_id -k privatekey [-h, --help] [--version] [--debug]

REQUIRED PARAMETERS

instance_id			Identifier of a Windows instance.

-k				Private key file that corresponds to the keypair used to launch the instance.

OPTIONAL PARAMETERS

"""


def usage(status=1):
    print usage_string
    Util().usage()
    sys.exit(status)


def version():
    print Util().version()
    sys.exit()


def main():
    euca = None
    try:
        euca = Euca2ool('k:')
    except Exception, e:
        print e
        usage()

    instance_id = None
    private_key_path = None

    for (name, value) in euca.opts:
        if name == '-k':
            private_key_path = value
        elif name in ('-h', '--help'):
            usage(0)
        elif name == '--version':
            version()

    for arg in euca.args:
        instance_id = arg
        break

    if instance_id and private_key_path:
        try:
            euca.validate_instance_id(instance_id)
        except InstanceValidationError:
            print 'Invalid instance id'
            sys.exit(1)
        try:
            euca.validate_file(private_key_path)
        except FileValidationError:
            print 'Invalid private key'
            sys.exit(1)
        try:
            euca_conn = euca.make_connection()
        except ConnectionFailed, e:
            print e.message
            sys.exit(1)
        try:
            password_data = \
                euca_conn.get_password_data(instance_id=instance_id)
            if password_data:
                print euca.decrypt_string(password_data,
                        private_key_path, encoded=True)
        except Exception, ex:
            euca.display_error_and_exit('%s' % ex)
    else:

        if not instance_id:
            print 'instance_id must be specified.'
        if not private_key_path:
            print 'private_key_path (-k) must be specified.'
        usage(1)


if __name__ == '__main__':
    main()

