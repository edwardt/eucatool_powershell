#!/usr/bin/python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt
import sys
import os
from euca2ools import Euca2ool, Util, ConnectionFailed

usage_string = \
    """
Show image attributes.

euca-describe-image-attribute [-l, --launch-permission] [-p, --product-code] 
[-B, --block-device-mapping] [--kernel] [--ramdisk]
[-h, --help] [--version] [--debug] image_id 

REQUIRED PARAMETERS
	
image_id			unique identifier for the image that you want to retrieve the attributes for. 

OPTIONAL PARAMETERS

-B, --block-device-mapping	show block device mapping.
-l, --launch-permission 	show launch permissions.
-p, --product-code		show the product codes associated with the image
--kernel 			show the kernel id associated with the image.
--ramdisk 			show the ramdisk id associated with the image.

"""


def usage(status=1):
    print usage_string
    Util().usage()
    sys.exit(status)


def version():
    print Util().version()
    sys.exit()


def display_image_attribute(image_id, image_attribute):
    if image_attribute.name == 'launch_permission':
        if image_attribute.attrs.has_key('groups'):
            for group in image_attribute.attrs['groups']:
                print 'launchPermission\t%s\tgroup\t%s' \
                    % (image_attribute.image_id, group)
        if image_attribute.attrs.has_key('user_ids'):
            for userid in image_attribute.attrs['user_ids']:
                print 'launchPermission\t%s\tuserId\t%s' \
                    % (image_attribute.image_id, userid)
    if image_attribute.attrs.has_key('product_codes'):
        for product_code in image_attribute.attrs['product_codes']:
            print 'productCodes\t%s\tproductCode\t%s' \
                % (image_attribute.image_id, product_code)
    if image_attribute.kernel is not None:
        print 'kernel\t%s\t\t%s' % (image_attribute.image_id,
                                    image_attribute.value)
    if image_attribute.ramdisk is not None:
        print 'ramdisk\t%s\t\t%s' % (image_attribute.image_id,
                image_attribute.value)
    if image_attribute.attrs.has_key('block_device_mapping'):
        block_device_mapping = \
            image_attribute.attrs['block_device_mapping']
        for dev_name in block_device_mapping:
            print 'blockDeviceMapping\t%s\tblockDeviceMap\t%s: %s' \
                % (image_id, dev_name,
                   block_device_mapping[dev_name])

def main():
    euca = None
    try:
        euca = Euca2ool('lpB', ['block-device-mapping',
                        'launch-permission', 'product-code', 'kernel',
                        'ramdisk'])
    except Exception, e:
        print e
        usage()

    image_id = None
    image_attribute = None

    for (name, value) in euca.opts:
        if name in ('-p', '--product-code'):
            if not image_attribute:
                image_attribute = 'productCodes'
        elif name in ('-l', '--launch-permission'):
            if not image_attribute:
                image_attribute = 'launchPermission'
        elif name in ('-B', '--block-device-mapping'):
            if not image_attribute:
                image_attribute = 'blockDeviceMapping'
        elif name == '--kernel':
            if not image_attribute:
                image_attribute = 'kernel'
        elif name == '--ramdisk':
            if not image_attribute:
                image_attribute = 'ramdisk'
        elif name in ('-h', '--help'):
            usage(0)
        elif name == '--version':
            version()

    for arg in euca.args:
        image_id = arg
        break

    if image_id and image_attribute:
        try:
            euca_conn = euca.make_connection()
        except ConnectionFailed, e:
            print e.message
            sys.exit(1)
        try:
            image_attribute = \
                euca_conn.get_image_attribute(image_id=image_id,
                    attribute=image_attribute)
        except Exception, ex:
            euca.display_error_and_exit('%s' % ex)

        if image_attribute:
            display_image_attribute(image_id, image_attribute)
    else:
        if not image_id:
            print 'image_id must be specified'
        if not image_attribute:
            print 'image attribute must be specified'
        usage()


if __name__ == '__main__':
    main()

