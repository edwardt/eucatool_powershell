#!/usr/bin/python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt
import sys
import os
from euca2ools import Euca2ool, Util, ConnectionFailed

usage_string = \
    """
Registers a manifest for use with the cloud.

euca-register [-h, --help] [--version] [--debug] image_location 

REQUIRED PARAMETERS
	
image_location - path to the uploaded image (bucket/manifest).

OPTIONAL PARAMETERS

-b, --block-device-mapping      Block device mapping for the instance(s). Option may be used multiple times.
 
-d, --description		Description of the image.

-n, --name			Name of the image.

-a, --architecture	 	Architecture of the image. Can be 'i386' or 'x86_64'. Defaults to 'i386'.

--kernel			The kernel ID to be associated with the image.

--ramdisk			The ramdisk ID to be associated with the image.

--root-device-name		The root device name for the image (for example, '/dev/sda1').

-s, --snapshot			The snapshot ID to use as the root device.
"""


def usage(status=1):
    print usage_string
    Util().usage(compat=True)
    sys.exit(status)


def version():
    print Util().version()
    sys.exit()


def main():
    euca = None
    try:
        euca = Euca2ool('b:d:n:a:s:', [
            'block-device-mapping=',
            'description=',
            'name=',
            'architecture=',
            'kernel=',
            'ramdisk=',
            'root-device-name=',
            'snapshot=',
            ], compat=True)
    except Exception, e:
        print e
        usage()

    image_location = None
    block_device_map_args = []
    block_device_map = None
    description = None
    image_name = None
    architecture = None
    kernel = None
    ramdisk = None
    root_device_name = None
    snapshot = None

    for (name, value) in euca.opts:
        if name in ('-b', '--block-device-mapping'):
            block_device_map_args.append(value)
        elif name in ('-d', '--description'):
            description = value
        elif name in ('-n', '--name'):
            image_name = value
        elif name in ('-a', '--architecture'):
            architecture = value
        elif name == '--kernel':
            kernel = value
        elif name == '--ramdisk':
            ramdisk = value
        elif name == '--root-device-name':
            root_device_name = value
        elif name in ('-s', '--snapshot'):
            snapshot = value
        elif name in ('-h', '--help'):
            usage(0)
        elif name == '--version':
            version()

    for arg in euca.args:
        image_location = arg
        break

    if image_location:
        try:
            euca_conn = euca.make_connection()
        except ConnectionFailed, e:
            print e.message
            sys.exit(1)
        if snapshot:
            if not root_device_name:
                root_device_name = '/dev/sda1'
            block_device_map_args.append('%s=%s' % (root_device_name,
                    snapshot))
        if block_device_map_args:
            block_device_map = \
                euca.parse_block_device_args(block_device_map_args)
        try:
            image_id = euca_conn.register_image(
                name=image_name,
                description=description,
                image_location=image_location,
                architecture=architecture,
                kernel_id=kernel,
                ramdisk_id=ramdisk,
                root_device_name=root_device_name,
                block_device_map=block_device_map,
                )
        except Exception, ex:
            euca.display_error_and_exit('%s' % ex)

        if image_id:
            print 'IMAGE\t%s' % image_id
    else:
        print 'image location must be specified'
        usage()


if __name__ == '__main__':
    main()

