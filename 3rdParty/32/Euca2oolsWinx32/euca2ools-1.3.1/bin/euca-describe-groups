#!/usr/bin/python
# -*- coding: utf-8 -*-

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt
import sys
import os
from euca2ools import Euca2ool, Util, ConnectionFailed

usage_string = \
    """
Shows information about groups.

euca-describe-groups [-h, --help] [--version] [--debug] [group1 group2...groupN] 

OPTIONAL PARAMETERS

group1 group2...groupN		groups to describe. 

"""


def usage(status=1):
    print usage_string
    Util().usage()
    sys.exit(status)


def version():
    print Util().version()
    sys.exit()


def display_groups(groups, group_ids):
    check_group_ids = False
    if len(group_ids) > 0:
        check_group_ids = True
    for group in groups:
        if check_group_ids:
            if not group.name in group_ids:
                continue
        group_string = '%s\t%s\t%s' % (group.owner_id, group.name,
                group.description)
        print 'GROUP\t%s' % group_string
        for rule in group.rules:
            permission_string = '%s\t%s\tALLOWS\t%s\t%s\t%s' \
                % (group.owner_id, group.name, rule.ip_protocol,
                   rule.from_port, rule.to_port)
            for grant in rule.grants:
                grant_string = '\tFROM'
                if grant.owner_id or grant.name:
                    if grant.owner_id:
                        grant_string = '\tUSER\t%s' % grant.owner_id
                    if grant.name:
                        grant_string = '\tGRPNAME\t%s' % grant.name
                else:
                    grant_string += '\tCIDR\t%s' % grant.cidr_ip
                permission_string += grant_string
                print 'PERMISSION\t%s' % permission_string


def main():
    euca = None
    try:
        euca = Euca2ool()
    except Exception, e:
        print e
        usage()

    for (name, value) in euca.opts:
        if name in ('-h', '--help'):
            usage(0)
        elif name == '--version':
            version()

    group_ids = euca.process_args()
    try:
        euca_conn = euca.make_connection()
    except ConnectionFailed, e:
        print e.message
        sys.exit(1)
    try:
        groups = euca_conn.get_all_security_groups()
    except Exception, ex:
        euca.display_error_and_exit('%s' % ex)

    display_groups(groups, group_ids)


if __name__ == '__main__':
    main()

